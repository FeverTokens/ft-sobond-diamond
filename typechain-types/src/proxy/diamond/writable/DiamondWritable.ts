/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IDiamondWritableInternal {
  export type FacetCutStruct = {
    target: AddressLike;
    action: BigNumberish;
    selectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    target: string,
    action: bigint,
    selectors: string[]
  ] & { target: string; action: bigint; selectors: string[] };
}

export interface DiamondWritableInterface extends Interface {
  getFunction(nameOrSignature: "diamondCut"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamondWritableInternal.FacetCutStruct[], AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
}

export namespace DiamondCutEvent {
  export type InputTuple = [
    facetCuts: IDiamondWritableInternal.FacetCutStruct[],
    target: AddressLike,
    data: BytesLike
  ];
  export type OutputTuple = [
    facetCuts: IDiamondWritableInternal.FacetCutStructOutput[],
    target: string,
    data: string
  ];
  export interface OutputObject {
    facetCuts: IDiamondWritableInternal.FacetCutStructOutput[];
    target: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DiamondWritable extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondWritable;
  waitForDeployment(): Promise<this>;

  interface: DiamondWritableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  diamondCut: TypedContractMethod<
    [
      facetCuts: IDiamondWritableInternal.FacetCutStruct[],
      target: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "diamondCut"
  ): TypedContractMethod<
    [
      facetCuts: IDiamondWritableInternal.FacetCutStruct[],
      target: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DiamondCut"
  ): TypedContractEvent<
    DiamondCutEvent.InputTuple,
    DiamondCutEvent.OutputTuple,
    DiamondCutEvent.OutputObject
  >;

  filters: {
    "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;
    DiamondCut: TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;
  };
}
