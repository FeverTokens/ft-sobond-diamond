/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EnumerableMapUintToAddressMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "at"
      | "contains"
      | "get"
      | "keys"
      | "length"
      | "remove"
      | "set"
      | "toArray"
      | "values"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "at", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "keys", values?: undefined): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "toArray", values?: undefined): string;
  encodeFunctionData(functionFragment: "values", values?: undefined): string;

  decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "values", data: BytesLike): Result;
}

export interface EnumerableMapUintToAddressMock extends BaseContract {
  connect(runner?: ContractRunner | null): EnumerableMapUintToAddressMock;
  waitForDeployment(): Promise<this>;

  interface: EnumerableMapUintToAddressMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  at: TypedContractMethod<[index: BigNumberish], [[bigint, string]], "view">;

  contains: TypedContractMethod<[key: BigNumberish], [boolean], "view">;

  get: TypedContractMethod<[key: BigNumberish], [string], "view">;

  keys: TypedContractMethod<[], [bigint[]], "view">;

  length: TypedContractMethod<[], [bigint], "view">;

  remove: TypedContractMethod<[key: BigNumberish], [boolean], "nonpayable">;

  set: TypedContractMethod<
    [key: BigNumberish, value: AddressLike],
    [boolean],
    "nonpayable"
  >;

  toArray: TypedContractMethod<
    [],
    [[bigint[], string[]] & { keysOut: bigint[]; valuesOut: string[] }],
    "view"
  >;

  values: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "at"
  ): TypedContractMethod<[index: BigNumberish], [[bigint, string]], "view">;
  getFunction(
    nameOrSignature: "contains"
  ): TypedContractMethod<[key: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[key: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "keys"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "length"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[key: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "set"
  ): TypedContractMethod<
    [key: BigNumberish, value: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toArray"
  ): TypedContractMethod<
    [],
    [[bigint[], string[]] & { keysOut: bigint[]; valuesOut: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "values"
  ): TypedContractMethod<[], [string[]], "view">;

  filters: {};
}
