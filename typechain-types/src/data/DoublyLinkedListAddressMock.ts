/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DoublyLinkedListAddressMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contains"
      | "insertAfter"
      | "insertBefore"
      | "next"
      | "pop"
      | "prev"
      | "push"
      | "remove"
      | "replace"
      | "shift"
      | "unshift"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contains",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insertAfter",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insertBefore",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "next", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pop", values?: undefined): string;
  encodeFunctionData(functionFragment: "prev", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "push", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "remove", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "replace",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "shift", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unshift",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insertAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "next", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "replace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unshift", data: BytesLike): Result;
}

export interface DoublyLinkedListAddressMock extends BaseContract {
  connect(runner?: ContractRunner | null): DoublyLinkedListAddressMock;
  waitForDeployment(): Promise<this>;

  interface: DoublyLinkedListAddressMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contains: TypedContractMethod<[value: AddressLike], [boolean], "view">;

  insertAfter: TypedContractMethod<
    [prevValue: AddressLike, newValue: AddressLike],
    [boolean],
    "nonpayable"
  >;

  insertBefore: TypedContractMethod<
    [nextValue: AddressLike, newValue: AddressLike],
    [boolean],
    "nonpayable"
  >;

  next: TypedContractMethod<[value: AddressLike], [string], "view">;

  pop: TypedContractMethod<[], [string], "nonpayable">;

  prev: TypedContractMethod<[value: AddressLike], [string], "view">;

  push: TypedContractMethod<[value: AddressLike], [boolean], "nonpayable">;

  remove: TypedContractMethod<[value: AddressLike], [boolean], "nonpayable">;

  replace: TypedContractMethod<
    [oldValue: AddressLike, newValue: AddressLike],
    [boolean],
    "nonpayable"
  >;

  shift: TypedContractMethod<[], [string], "nonpayable">;

  unshift: TypedContractMethod<[value: AddressLike], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contains"
  ): TypedContractMethod<[value: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "insertAfter"
  ): TypedContractMethod<
    [prevValue: AddressLike, newValue: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "insertBefore"
  ): TypedContractMethod<
    [nextValue: AddressLike, newValue: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "next"
  ): TypedContractMethod<[value: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "pop"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "prev"
  ): TypedContractMethod<[value: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "push"
  ): TypedContractMethod<[value: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[value: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "replace"
  ): TypedContractMethod<
    [oldValue: AddressLike, newValue: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shift"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "unshift"
  ): TypedContractMethod<[value: AddressLike], [boolean], "nonpayable">;

  filters: {};
}
