/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IDelegateInvestorManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delegateDisableInvestorFromWhitelist"
      | "delegateEnableInvestorToWhitelist"
      | "getCustodianDelegate"
      | "isCustodianDelegate"
      | "setCustodianDelegate"
      | "unsetCustodianDelegate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CustodianDelegateSet" | "CustodianDelegateUnset"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "delegateDisableInvestorFromWhitelist",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateEnableInvestorToWhitelist",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustodianDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCustodianDelegate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustodianDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetCustodianDelegate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "delegateDisableInvestorFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateEnableInvestorToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustodianDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCustodianDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustodianDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetCustodianDelegate",
    data: BytesLike
  ): Result;
}

export namespace CustodianDelegateSetEvent {
  export type InputTuple = [custodian: AddressLike, delegate: AddressLike];
  export type OutputTuple = [custodian: string, delegate: string];
  export interface OutputObject {
    custodian: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustodianDelegateUnsetEvent {
  export type InputTuple = [custodian: AddressLike, delegate: AddressLike];
  export type OutputTuple = [custodian: string, delegate: string];
  export interface OutputObject {
    custodian: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDelegateInvestorManagement extends BaseContract {
  connect(runner?: ContractRunner | null): IDelegateInvestorManagement;
  waitForDeployment(): Promise<this>;

  interface: IDelegateInvestorManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegateDisableInvestorFromWhitelist: TypedContractMethod<
    [investor_: AddressLike, delegator_: AddressLike],
    [void],
    "nonpayable"
  >;

  delegateEnableInvestorToWhitelist: TypedContractMethod<
    [investor_: AddressLike, delegator_: AddressLike],
    [void],
    "nonpayable"
  >;

  getCustodianDelegate: TypedContractMethod<
    [custodian: AddressLike],
    [string],
    "view"
  >;

  isCustodianDelegate: TypedContractMethod<
    [custodian: AddressLike, delegate: AddressLike],
    [boolean],
    "view"
  >;

  setCustodianDelegate: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  unsetCustodianDelegate: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegateDisableInvestorFromWhitelist"
  ): TypedContractMethod<
    [investor_: AddressLike, delegator_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateEnableInvestorToWhitelist"
  ): TypedContractMethod<
    [investor_: AddressLike, delegator_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCustodianDelegate"
  ): TypedContractMethod<[custodian: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isCustodianDelegate"
  ): TypedContractMethod<
    [custodian: AddressLike, delegate: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCustodianDelegate"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsetCustodianDelegate"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CustodianDelegateSet"
  ): TypedContractEvent<
    CustodianDelegateSetEvent.InputTuple,
    CustodianDelegateSetEvent.OutputTuple,
    CustodianDelegateSetEvent.OutputObject
  >;
  getEvent(
    key: "CustodianDelegateUnset"
  ): TypedContractEvent<
    CustodianDelegateUnsetEvent.InputTuple,
    CustodianDelegateUnsetEvent.OutputTuple,
    CustodianDelegateUnsetEvent.OutputObject
  >;

  filters: {
    "CustodianDelegateSet(address,address)": TypedContractEvent<
      CustodianDelegateSetEvent.InputTuple,
      CustodianDelegateSetEvent.OutputTuple,
      CustodianDelegateSetEvent.OutputObject
    >;
    CustodianDelegateSet: TypedContractEvent<
      CustodianDelegateSetEvent.InputTuple,
      CustodianDelegateSetEvent.OutputTuple,
      CustodianDelegateSetEvent.OutputObject
    >;

    "CustodianDelegateUnset(address,address)": TypedContractEvent<
      CustodianDelegateUnsetEvent.InputTuple,
      CustodianDelegateUnsetEvent.OutputTuple,
      CustodianDelegateUnsetEvent.OutputObject
    >;
    CustodianDelegateUnset: TypedContractEvent<
      CustodianDelegateUnsetEvent.InputTuple,
      CustodianDelegateUnsetEvent.OutputTuple,
      CustodianDelegateUnsetEvent.OutputObject
    >;
  };
}
