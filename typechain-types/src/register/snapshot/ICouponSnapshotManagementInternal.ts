/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface ICouponSnapshotManagementInternalInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "AssetHTLC" | "SnapshotTimestampChange"
  ): EventFragment;
}

export namespace AssetHTLCEvent {
  export type InputTuple = [
    txId: BytesLike,
    from: AddressLike,
    to: AddressLike,
    hL: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    txId: string,
    from: string,
    to: string,
    hL: string,
    status: bigint
  ];
  export interface OutputObject {
    txId: string;
    from: string;
    to: string;
    hL: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SnapshotTimestampChangeEvent {
  export type InputTuple = [
    couponDate: BigNumberish,
    currentTimestamp: BigNumberish,
    nextTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    couponDate: bigint,
    currentTimestamp: bigint,
    nextTimestamp: bigint
  ];
  export interface OutputObject {
    couponDate: bigint;
    currentTimestamp: bigint;
    nextTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICouponSnapshotManagementInternal extends BaseContract {
  connect(runner?: ContractRunner | null): ICouponSnapshotManagementInternal;
  waitForDeployment(): Promise<this>;

  interface: ICouponSnapshotManagementInternalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AssetHTLC"
  ): TypedContractEvent<
    AssetHTLCEvent.InputTuple,
    AssetHTLCEvent.OutputTuple,
    AssetHTLCEvent.OutputObject
  >;
  getEvent(
    key: "SnapshotTimestampChange"
  ): TypedContractEvent<
    SnapshotTimestampChangeEvent.InputTuple,
    SnapshotTimestampChangeEvent.OutputTuple,
    SnapshotTimestampChangeEvent.OutputObject
  >;

  filters: {
    "AssetHTLC(bytes32,address,address,bytes32,uint8)": TypedContractEvent<
      AssetHTLCEvent.InputTuple,
      AssetHTLCEvent.OutputTuple,
      AssetHTLCEvent.OutputObject
    >;
    AssetHTLC: TypedContractEvent<
      AssetHTLCEvent.InputTuple,
      AssetHTLCEvent.OutputTuple,
      AssetHTLCEvent.OutputObject
    >;

    "SnapshotTimestampChange(uint256,uint256,uint256)": TypedContractEvent<
      SnapshotTimestampChangeEvent.InputTuple,
      SnapshotTimestampChangeEvent.OutputTuple,
      SnapshotTimestampChangeEvent.OutputObject
    >;
    SnapshotTimestampChange: TypedContractEvent<
      SnapshotTimestampChangeEvent.InputTuple,
      SnapshotTimestampChangeEvent.OutputTuple,
      SnapshotTimestampChangeEvent.OutputObject
    >;
  };
}
