/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IRegisterMetadataInternal {
  export type BondDataStruct = {
    name: string;
    isin: string;
    expectedSupply: BigNumberish;
    currency: BytesLike;
    unitValue: BigNumberish;
    couponRate: BigNumberish;
    creationDate: BigNumberish;
    issuanceDate: BigNumberish;
    maturityDate: BigNumberish;
    couponDates: BigNumberish[];
    cutOffTime: BigNumberish;
  };

  export type BondDataStructOutput = [
    name: string,
    isin: string,
    expectedSupply: bigint,
    currency: string,
    unitValue: bigint,
    couponRate: bigint,
    creationDate: bigint,
    issuanceDate: bigint,
    maturityDate: bigint,
    couponDates: bigint[],
    cutOffTime: bigint
  ] & {
    name: string;
    isin: string;
    expectedSupply: bigint;
    currency: string;
    unitValue: bigint;
    couponRate: bigint;
    creationDate: bigint;
    issuanceDate: bigint;
    maturityDate: bigint;
    couponDates: bigint[];
    cutOffTime: bigint;
  };
}

export interface IRegisterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCouponDate"
      | "addressForNewAdmin"
      | "allowance"
      | "approve"
      | "atReturningHash"
      | "balanceOf"
      | "balanceOfAt"
      | "balanceOfCoupon"
      | "burn"
      | "changeAdminRole"
      | "checkIfCouponDateExists"
      | "checkIfMaturityDateExists"
      | "currentCouponDate"
      | "currentSnapshotDatetime"
      | "decreaseAllowance"
      | "delCouponDate"
      | "disableContractFromWhitelist"
      | "disableInvestorFromWhitelist"
      | "enableContractToWhitelist"
      | "enableInvestorToWhitelist"
      | "firstVoterForNewAdmin"
      | "getAllInvestors"
      | "getBondCouponRate"
      | "getBondData"
      | "getBondUnitValue"
      | "getCreationDate"
      | "getInvestorListAtCoupon"
      | "getIssuanceDate"
      | "grantBndRole"
      | "grantCakRole"
      | "grantCstRole"
      | "grantPayRole"
      | "increaseAllowance"
      | "investorCustodian"
      | "investorsAllowed"
      | "isBnD"
      | "isCAK"
      | "isCallerApprovedSmartContract"
      | "isContractAllowed"
      | "isCustodian"
      | "isPay"
      | "makeReady"
      | "mint"
      | "nextSnapshotDatetime"
      | "primaryIssuanceAccount"
      | "publicMessage"
      | "registerAdmin"
      | "returnBalanceToPrimaryIssuanceAccount"
      | "revertReady"
      | "revokeBndRole"
      | "revokeCakRole"
      | "revokeCstRole"
      | "revokePayRole"
      | "setBondData"
      | "setCreationDate"
      | "setCurrency"
      | "setCurrentCouponDate"
      | "setExpectedSupply"
      | "setIsinSymbol"
      | "setIssuanceDate"
      | "setName"
      | "status"
      | "toggleFrozen"
      | "totalSupply"
      | "totalSupplyAt"
      | "totalSupplyAtCoupon"
      | "transfer"
      | "transferFrom"
      | "votesForNewAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "Approval"
      | "AssetHTLC"
      | "DisableContract"
      | "DisableInvestor"
      | "EnableContract"
      | "EnableInvestor"
      | "NewBondDrafted"
      | "PublicMessage"
      | "RegisterStatusChanged"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Snapshot"
      | "SnapshotTimestampChange"
      | "Transfer"
      | "WalletAddedToWhitelist"
      | "WalletDeletedFromWhitelist"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCouponDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressForNewAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "atReturningHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfCoupon",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "changeAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfCouponDateExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfMaturityDateExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCouponDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSnapshotDatetime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delCouponDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableContractFromWhitelist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableInvestorFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableContractToWhitelist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableInvestorToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "firstVoterForNewAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondCouponRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondUnitValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorListAtCoupon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuanceDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantBndRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCakRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCstRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPayRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investorCustodian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investorsAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isBnD", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "isCAK", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isCallerApprovedSmartContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isContractAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCustodian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPay", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "makeReady", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nextSnapshotDatetime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryIssuanceAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicMessage",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnBalanceToPrimaryIssuanceAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBndRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCakRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCstRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePayRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentCouponDate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpectedSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsinSymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuanceDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAtCoupon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votesForNewAdmin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCouponDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressForNewAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "atReturningHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfCoupon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfCouponDateExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfMaturityDateExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCouponDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSnapshotDatetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delCouponDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContractFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableInvestorFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableContractToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableInvestorToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstVoterForNewAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondCouponRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondUnitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorListAtCoupon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuanceDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantBndRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCakRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCstRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPayRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorCustodian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBnD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCAK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCallerApprovedSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCustodian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextSnapshotDatetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryIssuanceAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnBalanceToPrimaryIssuanceAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBndRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCakRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCstRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePayRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentCouponDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpectedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsinSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIssuanceDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAtCoupon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesForNewAdmin",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [_addressForNewAdmin: AddressLike];
  export type OutputTuple = [_addressForNewAdmin: string];
  export interface OutputObject {
    _addressForNewAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetHTLCEvent {
  export type InputTuple = [
    txId: BytesLike,
    from: AddressLike,
    to: AddressLike,
    hL: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    txId: string,
    from: string,
    to: string,
    hL: string,
    status: bigint
  ];
  export interface OutputObject {
    txId: string;
    from: string;
    to: string;
    hL: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableContractEvent {
  export type InputTuple = [contractHash: BytesLike];
  export type OutputTuple = [contractHash: string];
  export interface OutputObject {
    contractHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableInvestorEvent {
  export type InputTuple = [investor: AddressLike];
  export type OutputTuple = [investor: string];
  export interface OutputObject {
    investor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnableContractEvent {
  export type InputTuple = [contractHash: BytesLike];
  export type OutputTuple = [contractHash: string];
  export interface OutputObject {
    contractHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnableInvestorEvent {
  export type InputTuple = [investor: AddressLike];
  export type OutputTuple = [investor: string];
  export interface OutputObject {
    investor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBondDraftedEvent {
  export type InputTuple = [creator: AddressLike, name: string, isin: string];
  export type OutputTuple = [creator: string, name: string, isin: string];
  export interface OutputObject {
    creator: string;
    name: string;
    isin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicMessageEvent {
  export type InputTuple = [
    sender: AddressLike,
    target: AddressLike,
    message: string
  ];
  export type OutputTuple = [sender: string, target: string, message: string];
  export interface OutputObject {
    sender: string;
    target: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterStatusChangedEvent {
  export type InputTuple = [
    emiter: AddressLike,
    name: string,
    isin: string,
    status: BigNumberish
  ];
  export type OutputTuple = [
    emiter: string,
    name: string,
    isin: string,
    status: bigint
  ];
  export interface OutputObject {
    emiter: string;
    name: string;
    isin: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SnapshotEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SnapshotTimestampChangeEvent {
  export type InputTuple = [
    couponDate: BigNumberish,
    currentTimestamp: BigNumberish,
    nextTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    couponDate: bigint,
    currentTimestamp: bigint,
    nextTimestamp: bigint
  ];
  export interface OutputObject {
    couponDate: bigint;
    currentTimestamp: bigint;
    nextTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletAddedToWhitelistEvent {
  export type InputTuple = [toBeAdded: AddressLike];
  export type OutputTuple = [toBeAdded: string];
  export interface OutputObject {
    toBeAdded: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletDeletedFromWhitelistEvent {
  export type InputTuple = [toBeDeleted: AddressLike];
  export type OutputTuple = [toBeDeleted: string];
  export interface OutputObject {
    toBeDeleted: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRegister extends BaseContract {
  connect(runner?: ContractRunner | null): IRegister;
  waitForDeployment(): Promise<this>;

  interface: IRegisterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCouponDate: TypedContractMethod<
    [date: BigNumberish],
    [void],
    "nonpayable"
  >;

  addressForNewAdmin: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  atReturningHash: TypedContractMethod<[addr: AddressLike], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfAt: TypedContractMethod<
    [account: AddressLike, snapshotId: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfCoupon: TypedContractMethod<
    [account: AddressLike, _couponDate: BigNumberish],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;

  changeAdminRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  checkIfCouponDateExists: TypedContractMethod<
    [_couponDate: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  checkIfMaturityDateExists: TypedContractMethod<
    [_maturityDate: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  currentCouponDate: TypedContractMethod<[], [bigint], "view">;

  currentSnapshotDatetime: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  delCouponDate: TypedContractMethod<
    [date: BigNumberish],
    [void],
    "nonpayable"
  >;

  disableContractFromWhitelist: TypedContractMethod<
    [contractHash: BytesLike],
    [void],
    "nonpayable"
  >;

  disableInvestorFromWhitelist: TypedContractMethod<
    [investor: AddressLike],
    [void],
    "nonpayable"
  >;

  enableContractToWhitelist: TypedContractMethod<
    [contractHash: BytesLike],
    [void],
    "nonpayable"
  >;

  enableInvestorToWhitelist: TypedContractMethod<
    [investor: AddressLike],
    [void],
    "nonpayable"
  >;

  firstVoterForNewAdmin: TypedContractMethod<[], [string], "view">;

  getAllInvestors: TypedContractMethod<[], [string[]], "view">;

  getBondCouponRate: TypedContractMethod<[], [bigint], "view">;

  getBondData: TypedContractMethod<
    [],
    [IRegisterMetadataInternal.BondDataStructOutput],
    "view"
  >;

  getBondUnitValue: TypedContractMethod<[], [bigint], "view">;

  getCreationDate: TypedContractMethod<[], [bigint], "view">;

  getInvestorListAtCoupon: TypedContractMethod<
    [CouponDate: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  getIssuanceDate: TypedContractMethod<[], [bigint], "view">;

  grantBndRole: TypedContractMethod<
    [bndAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCakRole: TypedContractMethod<
    [cakAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCstRole: TypedContractMethod<
    [cstAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  grantPayRole: TypedContractMethod<
    [cstAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  investorCustodian: TypedContractMethod<
    [investor: AddressLike],
    [string],
    "view"
  >;

  investorsAllowed: TypedContractMethod<
    [investor: AddressLike],
    [boolean],
    "view"
  >;

  isBnD: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isCAK: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isCallerApprovedSmartContract: TypedContractMethod<[], [boolean], "view">;

  isContractAllowed: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  isCustodian: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isPay: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  makeReady: TypedContractMethod<[], [void], "nonpayable">;

  mint: TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;

  nextSnapshotDatetime: TypedContractMethod<[], [bigint], "view">;

  primaryIssuanceAccount: TypedContractMethod<[], [string], "view">;

  publicMessage: TypedContractMethod<
    [to: AddressLike, message: string],
    [void],
    "nonpayable"
  >;

  registerAdmin: TypedContractMethod<[], [string], "view">;

  returnBalanceToPrimaryIssuanceAccount: TypedContractMethod<
    [investor: AddressLike],
    [boolean],
    "nonpayable"
  >;

  revertReady: TypedContractMethod<[], [void], "nonpayable">;

  revokeBndRole: TypedContractMethod<
    [bndAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCakRole: TypedContractMethod<
    [cakAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCstRole: TypedContractMethod<
    [cstAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  revokePayRole: TypedContractMethod<
    [cstAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setBondData: TypedContractMethod<
    [
      name_: string,
      expectedSupply_: BigNumberish,
      currency_: BytesLike,
      unitVal_: BigNumberish,
      couponRate_: BigNumberish,
      issuanceDate_: BigNumberish,
      maturityDate_: BigNumberish,
      cutOffTime_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setCreationDate: TypedContractMethod<
    [creationDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCurrency: TypedContractMethod<[currency: BytesLike], [void], "nonpayable">;

  setCurrentCouponDate: TypedContractMethod<
    [couponDate_: BigNumberish, recordDatetime_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExpectedSupply: TypedContractMethod<
    [expectedSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIsinSymbol: TypedContractMethod<
    [isinSymbol: string],
    [void],
    "nonpayable"
  >;

  setIssuanceDate: TypedContractMethod<
    [issuanceDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setName: TypedContractMethod<[name_: string], [void], "nonpayable">;

  status: TypedContractMethod<[], [bigint], "view">;

  toggleFrozen: TypedContractMethod<[], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<
    [snapshotId: BigNumberish],
    [bigint],
    "view"
  >;

  totalSupplyAtCoupon: TypedContractMethod<
    [_couponDate: BigNumberish],
    [bigint],
    "view"
  >;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  votesForNewAdmin: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCouponDate"
  ): TypedContractMethod<[date: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressForNewAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "atReturningHash"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [account: AddressLike, snapshotId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfCoupon"
  ): TypedContractMethod<
    [account: AddressLike, _couponDate: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeAdminRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIfCouponDateExists"
  ): TypedContractMethod<[_couponDate: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIfMaturityDateExists"
  ): TypedContractMethod<
    [_maturityDate: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentCouponDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentSnapshotDatetime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delCouponDate"
  ): TypedContractMethod<[date: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableContractFromWhitelist"
  ): TypedContractMethod<[contractHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableInvestorFromWhitelist"
  ): TypedContractMethod<[investor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableContractToWhitelist"
  ): TypedContractMethod<[contractHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableInvestorToWhitelist"
  ): TypedContractMethod<[investor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "firstVoterForNewAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllInvestors"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBondCouponRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBondData"
  ): TypedContractMethod<
    [],
    [IRegisterMetadataInternal.BondDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBondUnitValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreationDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInvestorListAtCoupon"
  ): TypedContractMethod<[CouponDate: BigNumberish], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getIssuanceDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantBndRole"
  ): TypedContractMethod<[bndAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCakRole"
  ): TypedContractMethod<[cakAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCstRole"
  ): TypedContractMethod<[cstAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantPayRole"
  ): TypedContractMethod<[cstAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "investorCustodian"
  ): TypedContractMethod<[investor: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "investorsAllowed"
  ): TypedContractMethod<[investor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBnD"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCAK"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCallerApprovedSmartContract"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isContractAllowed"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCustodian"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPay"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "makeReady"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextSnapshotDatetime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "primaryIssuanceAccount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publicMessage"
  ): TypedContractMethod<
    [to: AddressLike, message: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "returnBalanceToPrimaryIssuanceAccount"
  ): TypedContractMethod<[investor: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "revertReady"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeBndRole"
  ): TypedContractMethod<[bndAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCakRole"
  ): TypedContractMethod<[cakAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCstRole"
  ): TypedContractMethod<[cstAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePayRole"
  ): TypedContractMethod<[cstAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBondData"
  ): TypedContractMethod<
    [
      name_: string,
      expectedSupply_: BigNumberish,
      currency_: BytesLike,
      unitVal_: BigNumberish,
      couponRate_: BigNumberish,
      issuanceDate_: BigNumberish,
      maturityDate_: BigNumberish,
      cutOffTime_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreationDate"
  ): TypedContractMethod<[creationDate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrency"
  ): TypedContractMethod<[currency: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrentCouponDate"
  ): TypedContractMethod<
    [couponDate_: BigNumberish, recordDatetime_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpectedSupply"
  ): TypedContractMethod<[expectedSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsinSymbol"
  ): TypedContractMethod<[isinSymbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIssuanceDate"
  ): TypedContractMethod<[issuanceDate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setName"
  ): TypedContractMethod<[name_: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleFrozen"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[snapshotId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAtCoupon"
  ): TypedContractMethod<[_couponDate: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votesForNewAdmin"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AssetHTLC"
  ): TypedContractEvent<
    AssetHTLCEvent.InputTuple,
    AssetHTLCEvent.OutputTuple,
    AssetHTLCEvent.OutputObject
  >;
  getEvent(
    key: "DisableContract"
  ): TypedContractEvent<
    DisableContractEvent.InputTuple,
    DisableContractEvent.OutputTuple,
    DisableContractEvent.OutputObject
  >;
  getEvent(
    key: "DisableInvestor"
  ): TypedContractEvent<
    DisableInvestorEvent.InputTuple,
    DisableInvestorEvent.OutputTuple,
    DisableInvestorEvent.OutputObject
  >;
  getEvent(
    key: "EnableContract"
  ): TypedContractEvent<
    EnableContractEvent.InputTuple,
    EnableContractEvent.OutputTuple,
    EnableContractEvent.OutputObject
  >;
  getEvent(
    key: "EnableInvestor"
  ): TypedContractEvent<
    EnableInvestorEvent.InputTuple,
    EnableInvestorEvent.OutputTuple,
    EnableInvestorEvent.OutputObject
  >;
  getEvent(
    key: "NewBondDrafted"
  ): TypedContractEvent<
    NewBondDraftedEvent.InputTuple,
    NewBondDraftedEvent.OutputTuple,
    NewBondDraftedEvent.OutputObject
  >;
  getEvent(
    key: "PublicMessage"
  ): TypedContractEvent<
    PublicMessageEvent.InputTuple,
    PublicMessageEvent.OutputTuple,
    PublicMessageEvent.OutputObject
  >;
  getEvent(
    key: "RegisterStatusChanged"
  ): TypedContractEvent<
    RegisterStatusChangedEvent.InputTuple,
    RegisterStatusChangedEvent.OutputTuple,
    RegisterStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Snapshot"
  ): TypedContractEvent<
    SnapshotEvent.InputTuple,
    SnapshotEvent.OutputTuple,
    SnapshotEvent.OutputObject
  >;
  getEvent(
    key: "SnapshotTimestampChange"
  ): TypedContractEvent<
    SnapshotTimestampChangeEvent.InputTuple,
    SnapshotTimestampChangeEvent.OutputTuple,
    SnapshotTimestampChangeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WalletAddedToWhitelist"
  ): TypedContractEvent<
    WalletAddedToWhitelistEvent.InputTuple,
    WalletAddedToWhitelistEvent.OutputTuple,
    WalletAddedToWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "WalletDeletedFromWhitelist"
  ): TypedContractEvent<
    WalletDeletedFromWhitelistEvent.InputTuple,
    WalletDeletedFromWhitelistEvent.OutputTuple,
    WalletDeletedFromWhitelistEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AssetHTLC(bytes32,address,address,bytes32,uint8)": TypedContractEvent<
      AssetHTLCEvent.InputTuple,
      AssetHTLCEvent.OutputTuple,
      AssetHTLCEvent.OutputObject
    >;
    AssetHTLC: TypedContractEvent<
      AssetHTLCEvent.InputTuple,
      AssetHTLCEvent.OutputTuple,
      AssetHTLCEvent.OutputObject
    >;

    "DisableContract(bytes32)": TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;
    DisableContract: TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;

    "DisableInvestor(address)": TypedContractEvent<
      DisableInvestorEvent.InputTuple,
      DisableInvestorEvent.OutputTuple,
      DisableInvestorEvent.OutputObject
    >;
    DisableInvestor: TypedContractEvent<
      DisableInvestorEvent.InputTuple,
      DisableInvestorEvent.OutputTuple,
      DisableInvestorEvent.OutputObject
    >;

    "EnableContract(bytes32)": TypedContractEvent<
      EnableContractEvent.InputTuple,
      EnableContractEvent.OutputTuple,
      EnableContractEvent.OutputObject
    >;
    EnableContract: TypedContractEvent<
      EnableContractEvent.InputTuple,
      EnableContractEvent.OutputTuple,
      EnableContractEvent.OutputObject
    >;

    "EnableInvestor(address)": TypedContractEvent<
      EnableInvestorEvent.InputTuple,
      EnableInvestorEvent.OutputTuple,
      EnableInvestorEvent.OutputObject
    >;
    EnableInvestor: TypedContractEvent<
      EnableInvestorEvent.InputTuple,
      EnableInvestorEvent.OutputTuple,
      EnableInvestorEvent.OutputObject
    >;

    "NewBondDrafted(address,string,string)": TypedContractEvent<
      NewBondDraftedEvent.InputTuple,
      NewBondDraftedEvent.OutputTuple,
      NewBondDraftedEvent.OutputObject
    >;
    NewBondDrafted: TypedContractEvent<
      NewBondDraftedEvent.InputTuple,
      NewBondDraftedEvent.OutputTuple,
      NewBondDraftedEvent.OutputObject
    >;

    "PublicMessage(address,address,string)": TypedContractEvent<
      PublicMessageEvent.InputTuple,
      PublicMessageEvent.OutputTuple,
      PublicMessageEvent.OutputObject
    >;
    PublicMessage: TypedContractEvent<
      PublicMessageEvent.InputTuple,
      PublicMessageEvent.OutputTuple,
      PublicMessageEvent.OutputObject
    >;

    "RegisterStatusChanged(address,string,string,uint8)": TypedContractEvent<
      RegisterStatusChangedEvent.InputTuple,
      RegisterStatusChangedEvent.OutputTuple,
      RegisterStatusChangedEvent.OutputObject
    >;
    RegisterStatusChanged: TypedContractEvent<
      RegisterStatusChangedEvent.InputTuple,
      RegisterStatusChangedEvent.OutputTuple,
      RegisterStatusChangedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Snapshot(uint256)": TypedContractEvent<
      SnapshotEvent.InputTuple,
      SnapshotEvent.OutputTuple,
      SnapshotEvent.OutputObject
    >;
    Snapshot: TypedContractEvent<
      SnapshotEvent.InputTuple,
      SnapshotEvent.OutputTuple,
      SnapshotEvent.OutputObject
    >;

    "SnapshotTimestampChange(uint256,uint256,uint256)": TypedContractEvent<
      SnapshotTimestampChangeEvent.InputTuple,
      SnapshotTimestampChangeEvent.OutputTuple,
      SnapshotTimestampChangeEvent.OutputObject
    >;
    SnapshotTimestampChange: TypedContractEvent<
      SnapshotTimestampChangeEvent.InputTuple,
      SnapshotTimestampChangeEvent.OutputTuple,
      SnapshotTimestampChangeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WalletAddedToWhitelist(address)": TypedContractEvent<
      WalletAddedToWhitelistEvent.InputTuple,
      WalletAddedToWhitelistEvent.OutputTuple,
      WalletAddedToWhitelistEvent.OutputObject
    >;
    WalletAddedToWhitelist: TypedContractEvent<
      WalletAddedToWhitelistEvent.InputTuple,
      WalletAddedToWhitelistEvent.OutputTuple,
      WalletAddedToWhitelistEvent.OutputObject
    >;

    "WalletDeletedFromWhitelist(address)": TypedContractEvent<
      WalletDeletedFromWhitelistEvent.InputTuple,
      WalletDeletedFromWhitelistEvent.OutputTuple,
      WalletDeletedFromWhitelistEvent.OutputObject
    >;
    WalletDeletedFromWhitelist: TypedContractEvent<
      WalletDeletedFromWhitelistEvent.InputTuple,
      WalletDeletedFromWhitelistEvent.OutputTuple,
      WalletDeletedFromWhitelistEvent.OutputObject
    >;
  };
}
