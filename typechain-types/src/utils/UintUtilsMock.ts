/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UintUtilsMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add"
      | "sub"
      | "toHexString(uint256,uint256)"
      | "toHexString(uint256)"
      | "toString"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toHexString(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toHexString(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toString",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toHexString(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toHexString(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toString", data: BytesLike): Result;
}

export interface UintUtilsMock extends BaseContract {
  connect(runner?: ContractRunner | null): UintUtilsMock;
  waitForDeployment(): Promise<this>;

  interface: UintUtilsMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  sub: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  "toHexString(uint256,uint256)": TypedContractMethod<
    [value: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;

  "toHexString(uint256)": TypedContractMethod<
    [value: BigNumberish],
    [string],
    "view"
  >;

  toString: TypedContractMethod<[number: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "sub"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toHexString(uint256,uint256)"
  ): TypedContractMethod<
    [value: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "toHexString(uint256)"
  ): TypedContractMethod<[value: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "toString"
  ): TypedContractMethod<[number: BigNumberish], [string], "view">;

  filters: {};
}
