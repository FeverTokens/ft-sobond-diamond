/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DoublyLinkedListAddressMock,
  DoublyLinkedListAddressMockInterface,
} from "../../../src/data/DoublyLinkedListAddressMock";

const _abi = [
  {
    inputs: [],
    name: "DoublyLinkedList__InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "DoublyLinkedList__NonExistentEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevValue",
        type: "address",
      },
      {
        internalType: "address",
        name: "newValue",
        type: "address",
      },
    ],
    name: "insertAfter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nextValue",
        type: "address",
      },
      {
        internalType: "address",
        name: "newValue",
        type: "address",
      },
    ],
    name: "insertBefore",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "next",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pop",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "prev",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "push",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldValue",
        type: "address",
      },
      {
        internalType: "address",
        name: "newValue",
        type: "address",
      },
    ],
    name: "replace",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shift",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "unshift",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610769908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c806312fc41ca1461053b57806329092d0e146104b657806345788ce2146104845780635dbe47e814610411578063622d77fb146103cc578063631de4d6146102b557806380cea48a1461026657806389b09de7146101b9578063a4ece52c14610181578063ab73e316146101475763dc712cfd1461009857600080fd5b34610143576020366003190112610143576001600160a01b036100b9610558565b16906100c58380610625565b83928015610132576020946100d982610589565b156100ea575b505050519015158152f35b6101279394508080528086528185822055818152600186528481205590816000526000602052806040600020556000526001602052604060002055565b6001903880806100df565b82516305d4b02f60e31b8152600490fd5b5080fd5b5034610143576020366003190112610143576020916001600160a01b03906101799082610172610558565b1690610625565b169051908152f35b503461014357816003193601126101435761019e826020936105c6565b906101a8826106d4565b50516001600160a01b039091168152f35b5034610143576020366003190112610143576001600160a01b036101db610558565b16916101e781806105c6565b92818115610255576020946101fb83610589565b1561020d575b50505090519015158152f35b82859394506102379190816000526000602052806040600020556000526001602052604060002055565b82815280855280828120558080526001855220556001388080610201565b83516305d4b02f60e31b8152600490fd5b50346101435780600319360112610143576102ac602092610285610558565b6102a6610290610573565b6001600160a01b03908116939216918290610625565b90610664565b90519015158152f35b5090346103c957816003193601126103c9576102cf610558565b916102d8610573565b6001600160a01b039384169316916102ef84610589565b156103b8576102fe84826105c6565b936103098183610625565b829480156103a75760209661031d82610589565b1561034f575b50505083610336575b5050519015158152f35b815260018452808281205580845281812055388061032c565b61039c9396508161037b9190816000526000602052806040600020556000526001602052604060002055565b90816000526000602052806040600020556000526001602052604060002055565b600192388080610323565b84516305d4b02f60e31b8152600490fd5b8151630f71d89360e11b8152600490fd5b80fd5b50346101435780600319360112610143576102ac6020926103eb610558565b61040c6103f6610573565b6001600160a01b039081169392169182906105c6565b610664565b503461014357602036600319011261014357602091906001600160a01b03610437610558565b1691821515928361044c575050519015158152f35b8181929394505281845282808320541592831593610470575b50505090388061032c565b808052600186522054149050388281610465565b5034610143576020366003190112610143576020916001600160a01b039061017990826104af610558565b16906105c6565b503461014357602036600319011261014357602091906001600160a01b036104dc610558565b8391166104e881610589565b6104f6575050519015158152f35b9091925061050481836105c6565b61050e8284610625565b8184528386528085852055835260018552838320558152808281205580835281812055600190388061032c565b503461014357816003193601126101435761019e82602093610625565b600435906001600160a01b038216820361056e57565b600080fd5b602435906001600160a01b038216820361056e57565b8015159081610596575090565b60008181526020819052604081205415801593506105b357505090565b6040919250808052600160205220541490565b91909182600052600181016020526040600020549283811515928361061c575b83610607575b5050506105f557565b604051630f71d89360e11b8152600490fd5b610612929350610625565b14153883816105ec565b811593506105e6565b91909182600052806020526040600020549283811515928361065b575b83610650575050506105f557565b6106129293506105c6565b81159350610642565b6000939291849183156106c25761067a84610589565b15610686575b50505050565b60409394955080835282602052848484205584835260016020528383205581602052808383205581526001602052205560019038808080610680565b6040516305d4b02f60e31b8152600490fd5b906000916000906106e481610589565b6106ec575050565b909192506106fa81836105c6565b6107048284610625565b81845283602052806040852055835260016020526040832055815280604081205580602052604081205560019056fea2646970667358221220a2d2babd477b97a8f21fc95d35f3bef49ad610cf38ace66dce75719248135a5864736f6c63430008140033";

type DoublyLinkedListAddressMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DoublyLinkedListAddressMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DoublyLinkedListAddressMock__factory extends ContractFactory {
  constructor(...args: DoublyLinkedListAddressMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DoublyLinkedListAddressMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): DoublyLinkedListAddressMock__factory {
    return super.connect(runner) as DoublyLinkedListAddressMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DoublyLinkedListAddressMockInterface {
    return new Interface(_abi) as DoublyLinkedListAddressMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DoublyLinkedListAddressMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as DoublyLinkedListAddressMock;
  }
}
