/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  UintUtilsMock,
  UintUtilsMockInterface,
} from "../../../src/utils/UintUtilsMock";

const _abi = [
  {
    inputs: [],
    name: "UintUtils__InsufficientHexLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "sub",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "toHexString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "toHexString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "toString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610496908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c80632835a36d146100ef57806363e1cbea146100cc5780636900a3ae146100ab578063784cfccd1461008957638fba8d5c1461005657600080fd5b346100855760203660031901126100855761008190610076600435610357565b905191829182610125565b0390f35b5080fd5b5034610085576020906100a461009e3661010a565b906101d3565b9051908152f35b503461008557602036600319011261008557610081906100766004356102b9565b50346100855780600319360112610085576100819061007660243560043561039e565b5034610085576020906100a46101043661010a565b90610195565b6040906003190112610120576004359060243590565b600080fd5b6020808252825181830181905290939260005b82811061015a57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610138565b600160ff1b811461017f5760000390565b634e487b7160e01b600052601160045260246000fd5b906000808212156101b157509061009e6101ae9261016e565b90565b9082018092116101bf575090565b634e487b7160e01b81526011600452602490fd5b906000808212156101ec5750906101046101ae9261016e565b9082039182116101bf575090565b604051906040820182811067ffffffffffffffff82111761021a57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161021a57601f01601f191660200190565b9061025682610230565b60405190601f1990601f018116820167ffffffffffffffff81118382101761021a576040528382526102888294610230565b0190602036910137565b9081518110156102a3570160200190565b634e487b7160e01b600052603260045260246000fd5b801561033d5780600081805b61032157506102d38161024c565b925b6102de57505090565b600019810190811161017f578091600a916030838306810180911161017f5760f81b6001600160f81b03191660001a906103189086610292565b530490816102d5565b9150600019811461017f576001600a91019104808392916102c5565b506103466101fa565b60018152600360fc1b602082015290565b90811561038057600082805b61037257506101ae919261039e565b906001019060081c80610363565b905061038a6101fa565b60048152630307830360e41b602082015290565b600182811b926001600160ff1b0381160361017f576002830180841161017f576103c79061024c565b928351156102a3576030602085015383518210156102a35781906078602186015301905b80821161040d5750506103fb5790565b60405163c913478560e01b8152600490fd5b9091600f8116601081101561044b576f181899199a1a9b1b9c1cb0b131b232b360811b901a61043c8486610292565b5360041c9160001901906103eb565b60246000634e487b7160e01b81526032600452fdfea264697066735822122076b5cc9f0a823344c2484dafa0d2cfc58945c46ae8d6b0dcb8d523de9247bacf64736f6c63430008140033";

type UintUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UintUtilsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UintUtilsMock__factory extends ContractFactory {
  constructor(...args: UintUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UintUtilsMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UintUtilsMock__factory {
    return super.connect(runner) as UintUtilsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UintUtilsMockInterface {
    return new Interface(_abi) as UintUtilsMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UintUtilsMock {
    return new Contract(address, _abi, runner) as unknown as UintUtilsMock;
  }
}
