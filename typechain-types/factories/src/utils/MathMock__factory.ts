/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { MathMock, MathMockInterface } from "../../../src/utils/MathMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "abs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "average",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "sqrt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610212908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c9081631b5ac4b51461016b5781632b7423ab14610148578163677342ce146100af575080636d5433e61461008a57637ae2b5c71461005a57600080fd5b346100865760209161006b366101c1565b91508181111561007e5750905b51908152f35b905090610078565b5080fd5b50346100865760209161009c366101c1565b9091508082111561007e57509051908152f35b838334610086576020366003190112610086578235916001908184018085116101355784939290811c91865b8584106100ec576020868651908152f35b92945090918480156101225780870490810180911161010f57831c9291906100db565b634e487b7160e01b835260118252602483fd5b634e487b7160e01b835260128252602483fd5b634e487b7160e01b825260118652602482fd5b5050346100865760209061015b366101c1565b91519180821860011c9116018152f35b8284346101be5760203660031901126101be57823590808212156101b357600160ff1b82146101a05760209350039051908152f35b634e487b7160e01b815260118452602490fd5b506020925090610078565b80fd5b60409060031901126101d7576004359060243590565b600080fdfea2646970667358221220e2f1755e5b2e7e12296dc14acf6986d0da3f6a60311114b0f9a4db7d6bcca38d64736f6c63430008140033";

type MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathMock__factory extends ContractFactory {
  constructor(...args: MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MathMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MathMock__factory {
    return super.connect(runner) as MathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathMockInterface {
    return new Interface(_abi) as MathMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MathMock {
    return new Contract(address, _abi, runner) as unknown as MathMock;
  }
}
