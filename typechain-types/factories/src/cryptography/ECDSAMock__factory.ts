/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ECDSAMock,
  ECDSAMockInterface,
} from "../../../src/cryptography/ECDSAMock";

const _abi = [
  {
    inputs: [],
    name: "ECDSA__InvalidS",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSA__InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSA__InvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSA__InvalidV",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "toEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610340908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c90816319045a251461004a57508063918a15cf146100455763c2bf17b01461004057600080fd5b6101a4565b610132565b346100f75760403660031901126100f75760243567ffffffffffffffff8082116100f357366023830112156100f35781600401359081116100ee576040519161009d601f8301601f191660200184610110565b81835236602483830101116100ea57926020826100cc949360246100e6970183860137830101526004356101ea565b6040516001600160a01b0390911681529081906020820190565b0390f35b8380fd5b6100fa565b8280fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176100ee57604052565b3461019f57602036600319011261019f57604051602081017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152600435603c830152603c8252606082019082821067ffffffffffffffff8311176100ee57602092826040525190208152f35b600080fd5b3461019f57608036600319011261019f5760243560ff8116810361019f576101d86020916064359060443590600435610232565b6040516001600160a01b039091168152f35b90604181510361021457610211916020820151906060604084015193015160001a90610232565b90565b6040516309f846f760e31b8152600490fd5b6040513d6000823e3d90fd5b9291927f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116102f85760ff8216601b81141590816102ec575b506102da576102a0600093602095604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa156102d5576000516001600160a01b038116156102c35790565b6040516347f3b32760e11b8152600490fd5b610226565b604051630acd54a960e41b8152600490fd5b601c915014153861026c565b60405163e4a61add60e01b8152600490fdfea26469706673582212208b7109fddedf6f80881356b0dc85d618b2594b6e47e0286cd78b58fa45936f9364736f6c63430008140033";

type ECDSAMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAMock__factory extends ContractFactory {
  constructor(...args: ECDSAMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ECDSAMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ECDSAMock__factory {
    return super.connect(runner) as ECDSAMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAMockInterface {
    return new Interface(_abi) as ECDSAMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ECDSAMock {
    return new Contract(address, _abi, runner) as unknown as ECDSAMock;
  }
}
